import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class TicketManagementApp {

    private JFrame frame;
    private CardLayout cardLayout;
    private JPanel mainPanel;
    private JTextField startTimeField;
    private JTextField endTimeField;
    private JTextField dateField;
    private JTextField amountField;
    private JTextArea historyTextArea;
    private List<Ticket> tickets;

    public TicketManagementApp() {
        tickets = new ArrayList<>();
        frame = new JFrame("Ticket Management System");
        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);

        initTicketPanel();
        initHistoryPanel();

        frame.getContentPane().add(mainPanel);
        frame.setSize(500, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void initTicketPanel() {
        JPanel ticketPanel = new JPanel();
        ticketPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        ticketPanel.setLayout(null);

        // Back button
        JButton backButton = new JButton("Back");
        backButton.setBounds(13, 13, 69, 22);
        backButton.addActionListener(e -> {
            frame.dispose(); // Close current window
            // new RegistrationApp().showHomePanel(); // Uncomment this if RegistrationApp exists
        });
        styleButton(backButton);
        ticketPanel.add(backButton);

        JLabel welcomeLabel = new JLabel("Ticket Management System", SwingConstants.CENTER);
        welcomeLabel.setBounds(20, 20, 446, 19);
        welcomeLabel.setFont(new Font("Arial", Font.BOLD, 16));
        ticketPanel.add(welcomeLabel);

        JPanel centerPanel = new JPanel(new GridLayout(7, 2, 10, 10));
        centerPanel.setBounds(83, 49, 383, 294);
        centerPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        JLabel startTimeLabel = new JLabel("Start Time (HH:mm):");
        startTimeField = new JTextField();

        JLabel endTimeLabel = new JLabel("End Time (HH:mm):");
        endTimeField = new JTextField();

        JLabel dateLabel = new JLabel("Date (yyyy-MM-dd):");
        dateField = new JTextField();

        JLabel amountLabel = new JLabel("Amount (RM):");
        amountField = new JTextField();
        amountField.setEditable(false);

        JButton calculateButton = new JButton("Calculate Amount");
        calculateButton.addActionListener(new CalculateActionListener());
        styleButton(calculateButton);

        JButton viewHistoryButton = new JButton("View Ticket History");
        viewHistoryButton.addActionListener(e -> cardLayout.show(mainPanel, "HistoryPanel"));
        styleButton(viewHistoryButton);

        JButton popupHistoryButton = new JButton("Show Ticket History");
        popupHistoryButton.addActionListener(new PopupHistoryActionListener());
        styleButton(popupHistoryButton);
        
        JButton payParkingButton = new JButton("Pay Parking");
        payParkingButton.addActionListener(new PayParkingActionListener());
        styleButton(payParkingButton);

        centerPanel.add(startTimeLabel);
        centerPanel.add(startTimeField);
        centerPanel.add(endTimeLabel);
        centerPanel.add(endTimeField);
        centerPanel.add(dateLabel);
        centerPanel.add(dateField);
        centerPanel.add(amountLabel);
        centerPanel.add(amountField);
        centerPanel.add(viewHistoryButton);
        centerPanel.add(calculateButton);
        centerPanel.add(popupHistoryButton);
        centerPanel.add(payParkingButton);

        ticketPanel.add(centerPanel);
        mainPanel.add(ticketPanel, "TicketPanel");
    }

    private void initHistoryPanel() {
        JPanel historyPanel = new JPanel(new BorderLayout(10, 10));
        historyPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel historyLabel = new JLabel("Ticket History", SwingConstants.CENTER);
        historyLabel.setFont(new Font("Arial", Font.BOLD, 16));
        historyPanel.add(historyLabel, BorderLayout.NORTH);

        historyTextArea = new JTextArea();
        historyTextArea.setEditable(false);
        historyTextArea.setFont(new Font("Arial", Font.PLAIN, 14));
        JScrollPane scrollPane = new JScrollPane(historyTextArea);
        historyPanel.add(scrollPane, BorderLayout.CENTER);

        JButton backButton = new JButton("Back");
        backButton.addActionListener(e -> cardLayout.show(mainPanel, "TicketPanel"));
        styleButton(backButton);

        historyPanel.add(backButton, BorderLayout.SOUTH);
        mainPanel.add(historyPanel, "HistoryPanel");
    }

    private void updateHistoryTextArea() {
        StringBuilder historyContent = new StringBuilder();
        for (Ticket ticket : tickets) {
            historyContent.append(ticket).append("\n");
        }
        historyTextArea.setText(historyContent.toString());
    }

    private class CalculateActionListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
                DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

                LocalTime startTime = LocalTime.parse(startTimeField.getText(), timeFormatter);
                LocalTime endTime = LocalTime.parse(endTimeField.getText(), timeFormatter);
                LocalDate date = LocalDate.parse(dateField.getText(), dateFormatter);

                if (endTime.isBefore(startTime)) {
                    JOptionPane.showMessageDialog(frame, "End time must be after start time.");
                    return;
                }

                long durationInMinutes = Duration.between(startTime, endTime).toMinutes();
                double amount = durationInMinutes / 60.0; // Convert minutes to hours

                DecimalFormat df = new DecimalFormat("#0.00");
                amountField.setText("RM " + df.format(amount));

                Ticket ticket = new Ticket(startTimeField.getText(), endTimeField.getText(), dateField.getText(), amount);
                tickets.add(ticket);
                updateHistoryTextArea();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(frame, "Invalid input. Please check the format.");
            }
        }
    }

    private class PopupHistoryActionListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            StringBuilder historyContent = new StringBuilder();
            for (Ticket ticket : tickets) {
                historyContent.append(ticket).append("\n");
            }
            JOptionPane.showMessageDialog(frame, historyContent.toString(), "Ticket History", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private class PayParkingActionListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            // Launch the EWalletApp
            SwingUtilities.invokeLater(EWalletApp::new);
        }
    }

    private void styleButton(JButton button) {
        button.setBackground(new Color(70, 130, 180));
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setFont(new Font("Arial", Font.BOLD, 14));
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(TicketManagementApp::new);
    }
}

// Ticket class to store ticket details
class Ticket {
    private String startTime;
    private String endTime;
    private String date;
    private double amount;

    public Ticket(String startTime, String endTime, String date, double amount) {
        this.startTime = startTime;
        this.endTime = endTime;
        this.date = date;
        this.amount = amount;
    }

    @Override
    public String toString() {
        return "Date: " + date + ", Start: " + startTime + ", End: " + endTime + ", Amount: RM " + amount;
    }
}
