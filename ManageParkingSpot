import javax.swing.*;
import java.awt.*;
import java.util.List;

public class ManageParkingSpot {
    private JPanel managePanel;
    private DefaultListModel<String> listModel;
    private JList<String> parkingList;
    private List<String[]> parkingSpots;
    private CardLayout cardLayout;
    private JPanel mainPanel;
    private JFrame frame;
    private Admin admin;

    public ManageParkingSpot(JFrame frame, JPanel mainPanel, CardLayout cardLayout, List<String[]> parkingSpots, Admin admin) {
        this.frame = frame;
        this.mainPanel = mainPanel;
        this.cardLayout = cardLayout;
        this.parkingSpots = parkingSpots;
        this.admin = admin;

        initManagePanel();
    }

    private void initManagePanel() {
        managePanel = new JPanel(new BorderLayout());

        // Back Button
        JButton backButton = new JButton("Back");
        backButton.setPreferredSize(new Dimension(80, 30));  
        backButton.addActionListener(e -> {
            admin.refreshParkingDisplay(); // Refresh the Admin panel
            cardLayout.show(mainPanel, "HomePanel"); // Navigate back to the home panel
        });
        styleButton(backButton); // Apply the same style to the back button

        // Set the back button in the top-left corner
        JPanel backPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));  // FlowLayout for left alignment
        backPanel.add(backButton);
        managePanel.add(backPanel, BorderLayout.NORTH);

        // Parking List
        listModel = new DefaultListModel<>();
        updateParkingList();
        parkingList = new JList<>(listModel);
        managePanel.add(new JScrollPane(parkingList), BorderLayout.CENTER);

        // Buttons Panel
        JPanel buttonPanel = new JPanel();
        JButton updateButton = new JButton("Update Availability");
        JButton removeButton = new JButton("Remove Parking Spot");

        updateButton.addActionListener(e -> updateAvailability());
        removeButton.addActionListener(e -> removeParkingSpot());

        // Style the buttons
        styleButton(updateButton);
        styleButton(removeButton);

        buttonPanel.add(updateButton);
        buttonPanel.add(removeButton);
        managePanel.add(buttonPanel, BorderLayout.SOUTH);

        mainPanel.add(managePanel, "ManagePanel");
    }

    private void styleButton(JButton button) {
        button.setFont(new Font("Arial", Font.PLAIN, 16));
        button.setBackground(new Color(59, 89, 182)); // Apply same background color
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setOpaque(true);
    }

    private void updateParkingList() {
        listModel.clear();
        for (String[] spot : parkingSpots) {
            listModel.addElement("Spot: " + spot[0] + " | No Plate: " + spot[1] + " | Status: " + spot[2]);
        }
    }

    private void updateAvailability() {
        int selectedIndex = parkingList.getSelectedIndex();
        if (selectedIndex != -1) {
            String[] spot = parkingSpots.get(selectedIndex);
            
            if (spot[2].equals("Vacant")) {
                // Prompt for a plate number
                String plateNumber = JOptionPane.showInputDialog(frame, "Enter Plate Number:");
                if (plateNumber != null && !plateNumber.trim().isEmpty()) {
                    spot[2] = "Occupied"; // Set status to Occupied
                    spot[1] = plateNumber.toUpperCase(); // Update plate number
                    updateParkingList();
                    JOptionPane.showMessageDialog(frame, "Parking spot marked as occupied!");
                } else {
                    JOptionPane.showMessageDialog(frame, "Plate number cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                spot[2] = "Vacant"; // Set status to Vacant
                spot[1] = "No Car"; // Reset plate number
                updateParkingList();
                JOptionPane.showMessageDialog(frame, "Parking spot marked as vacant!");
            }
        } else {
            JOptionPane.showMessageDialog(frame, "Please select a parking spot to update.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }



    private void removeParkingSpot() {
        int selectedIndex = parkingList.getSelectedIndex();
        if (selectedIndex != -1) {
            parkingSpots.remove(selectedIndex);
            updateParkingList();
            JOptionPane.showMessageDialog(frame, "Parking spot removed!");
        } else {
            JOptionPane.showMessageDialog(frame, "Please select a parking spot to remove.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public JPanel getManagePanel() {
        return managePanel;
    }
}
