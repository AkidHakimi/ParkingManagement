import javax.swing.*;
import java.awt.*;
import java.util.List;

public class ManageParkingSpot {
    private JPanel managePanel;
    private DefaultListModel<String> listModel;
    private JList<String> parkingList;
    private List<String[]> parkingSpots;
    private CardLayout cardLayout;
    private JPanel mainPanel;
    private JFrame frame;
    private Admin admin;

    public ManageParkingSpot(JFrame frame, JPanel mainPanel, CardLayout cardLayout, List<String[]> parkingSpots, Admin admin) {
        this.frame = frame;
        this.mainPanel = mainPanel;
        this.cardLayout = cardLayout;
        this.parkingSpots = parkingSpots;
        this.admin = admin;

        initManagePanel();
    }

    private void initManagePanel() {
        managePanel = new JPanel(new BorderLayout());

        // Back Button
        JButton backButton = new JButton("Back");
        backButton.addActionListener(e -> {
            admin.refreshParkingDisplay(); // Refresh the Admin panel
            cardLayout.show(mainPanel, "HomePanel"); // Navigate back to the home panel
        });
        managePanel.add(backButton, BorderLayout.NORTH);

        // Parking List
        listModel = new DefaultListModel<>();
        updateParkingList();
        parkingList = new JList<>(listModel);
        managePanel.add(new JScrollPane(parkingList), BorderLayout.CENTER);

        // Buttons Panel
        JPanel buttonPanel = new JPanel();
        JButton updateButton = new JButton("Update Availability");
        JButton removeButton = new JButton("Remove Parking Spot");

        updateButton.addActionListener(e -> updateAvailability());
        removeButton.addActionListener(e -> removeParkingSpot());

        buttonPanel.add(updateButton);
        buttonPanel.add(removeButton);
        managePanel.add(buttonPanel, BorderLayout.SOUTH);

        mainPanel.add(managePanel, "ManagePanel");
    }

    private void updateParkingList() {
        listModel.clear();
        for (String[] spot : parkingSpots) {
            listModel.addElement("Spot: " + spot[0] + " | Type: " + spot[1] + " | Status: " + spot[2]);
        }
    }

    private void updateAvailability() {
        int selectedIndex = parkingList.getSelectedIndex();
        if (selectedIndex != -1) {
            String[] spot = parkingSpots.get(selectedIndex);
            // Toggle status between "Vacant" and "Occupied"
            spot[2] = spot[2].equals("Vacant") ? "Occupied" : "Vacant";
            updateParkingList();
            JOptionPane.showMessageDialog(frame, "Availability updated!");
        } else {
            JOptionPane.showMessageDialog(frame, "Please select a parking spot to update.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void removeParkingSpot() {
        int selectedIndex = parkingList.getSelectedIndex();
        if (selectedIndex != -1) {
            parkingSpots.remove(selectedIndex);
            updateParkingList();
            JOptionPane.showMessageDialog(frame, "Parking spot removed!");
        } else {
            JOptionPane.showMessageDialog(frame, "Please select a parking spot to remove.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public JPanel getManagePanel() {
        return managePanel;
    }
}
