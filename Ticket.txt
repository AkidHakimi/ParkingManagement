import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.time.Duration;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class TicketManagementApp {

    private JFrame frame;
    private CardLayout cardLayout;
    private JPanel mainPanel;
    private JTextField startTimeField;
    private JTextField dateField;
    private JTextField plateNumberField;
    private JTextField endTimeField;
    private JTextField amountField;
    private JTextArea historyTextArea;
    private List<Ticket> tickets;

    public TicketManagementApp() {
        tickets = new ArrayList<>();
        frame = new JFrame("Ticket Management System");
        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);

        initStartTicketPanel();
        initEndTicketPanel();
        initHistoryPanel();

        frame.getContentPane().add(mainPanel);
        frame.setSize(600, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void initStartTicketPanel() {
        JPanel startTicketPanel = new JPanel(new GridBagLayout());
        startTicketPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JLabel titleLabel = new JLabel("Start Ticket", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        startTicketPanel.add(titleLabel, gbc);

        gbc.gridwidth = 1;

        JLabel startTimeLabel = new JLabel("Start Time (HH:mm):");
        gbc.gridx = 0;
        gbc.gridy = 1;
        startTicketPanel.add(startTimeLabel, gbc);

        startTimeField = new JTextField(20);
        gbc.gridx = 1;
        gbc.gridy = 1;
        startTicketPanel.add(startTimeField, gbc);

        JLabel dateLabel = new JLabel("Date (yyyy-MM-dd):");
        gbc.gridx = 0;
        gbc.gridy = 2;
        startTicketPanel.add(dateLabel, gbc);

        dateField = new JTextField(20);
        gbc.gridx = 1;
        gbc.gridy = 2;
        startTicketPanel.add(dateField, gbc);

        JLabel plateNumberLabel = new JLabel("Plate Number:");
        gbc.gridx = 0;
        gbc.gridy = 3;
        startTicketPanel.add(plateNumberLabel, gbc);

        plateNumberField = new JTextField(20);
        gbc.gridx = 1;
        gbc.gridy = 3;
        startTicketPanel.add(plateNumberField, gbc);

        JButton nextButton = new JButton("Next");
        nextButton.addActionListener(e -> cardLayout.show(mainPanel, "EndTicketPanel"));
        styleButton(nextButton);
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.gridwidth = 2;
        startTicketPanel.add(nextButton, gbc);

        mainPanel.add(startTicketPanel, "StartTicketPanel");
    }

    private void initEndTicketPanel() {
        JPanel endTicketPanel = new JPanel(new GridBagLayout());
        endTicketPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JLabel titleLabel = new JLabel("End Ticket", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        endTicketPanel.add(titleLabel, gbc);

        gbc.gridwidth = 1;

        JLabel endTimeLabel = new JLabel("End Time (HH:mm):");
        gbc.gridx = 0;
        gbc.gridy = 1;
        endTicketPanel.add(endTimeLabel, gbc);

        endTimeField = new JTextField(20);
        gbc.gridx = 1;
        gbc.gridy = 1;
        endTicketPanel.add(endTimeField, gbc);

        JLabel amountLabel = new JLabel("Amount (RM):");
        gbc.gridx = 0;
        gbc.gridy = 2;
        endTicketPanel.add(amountLabel, gbc);

        amountField = new JTextField(20);
        amountField.setEditable(false);
        gbc.gridx = 1;
        gbc.gridy = 2;
        endTicketPanel.add(amountField, gbc);

        JButton calculateButton = new JButton("Calculate Amount");
        calculateButton.addActionListener(new CalculateActionListener());
        styleButton(calculateButton);
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        endTicketPanel.add(calculateButton, gbc);

        JButton viewHistoryButton = new JButton("View Ticket History");
        viewHistoryButton.addActionListener(e -> cardLayout.show(mainPanel, "HistoryPanel"));
        styleButton(viewHistoryButton);
        gbc.gridy = 4;
        endTicketPanel.add(viewHistoryButton, gbc);

        JButton popupHistoryButton = new JButton("Show Ticket History");
        popupHistoryButton.addActionListener(new PopupHistoryActionListener());
        styleButton(popupHistoryButton);
        gbc.gridy = 5;
        endTicketPanel.add(popupHistoryButton, gbc);

        JButton payParkingButton = new JButton("Pay Parking");
        payParkingButton.addActionListener(new PayParkingActionListener());
        styleButton(payParkingButton);
        gbc.gridy = 6;
        endTicketPanel.add(payParkingButton, gbc);

        mainPanel.add(endTicketPanel, "EndTicketPanel");
    }

    private void initHistoryPanel() {
        JPanel historyPanel = new JPanel(new BorderLayout(10, 10));
        historyPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel historyLabel = new JLabel("Ticket History", SwingConstants.CENTER);
        historyLabel.setFont(new Font("Arial", Font.BOLD, 16));
        historyPanel.add(historyLabel, BorderLayout.NORTH);

        historyTextArea = new JTextArea();
        historyTextArea.setEditable(false);
        historyTextArea.setFont(new Font("Arial", Font.PLAIN, 14));
        JScrollPane scrollPane = new JScrollPane(historyTextArea);
        historyPanel.add(scrollPane, BorderLayout.CENTER);

        JButton backButton = new JButton("Back");
        backButton.addActionListener(e -> cardLayout.show(mainPanel, "EndTicketPanel"));
        styleButton(backButton);

        historyPanel.add(backButton, BorderLayout.SOUTH);
        mainPanel.add(historyPanel, "HistoryPanel");
    }

    private void updateHistoryTextArea() {
        StringBuilder historyContent = new StringBuilder();
        for (Ticket ticket : tickets) {
            historyContent.append(ticket).append("\n");
        }
        historyTextArea.setText(historyContent.toString());
    }

    private class CalculateActionListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
                LocalTime startTime = LocalTime.parse(startTimeField.getText(), timeFormatter);
                LocalTime endTime = LocalTime.parse(endTimeField.getText(), timeFormatter);
                String date = dateField.getText();
                String plateNumber = plateNumberField.getText();

                if (endTime.isBefore(startTime)) {
                    JOptionPane.showMessageDialog(frame, "End time must be after start time.");
                    return;
                }

                long durationInMinutes = Duration.between(startTime, endTime).toMinutes();
                double amount = durationInMinutes / 60.0; // Convert minutes to hours

                DecimalFormat df = new DecimalFormat("#0.00");
                amountField.setText("RM " + df.format(amount));

                Ticket ticket = new Ticket(startTimeField.getText(), endTimeField.getText(), date, plateNumber, amount);
                tickets.add(ticket);
                updateHistoryTextArea();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(frame, "Invalid input. Please check the format.");
            }
        }
    }

    private class PopupHistoryActionListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            StringBuilder historyContent = new StringBuilder();
            for (Ticket ticket : tickets) {
                historyContent.append(ticket).append("\n");
            }
            JOptionPane.showMessageDialog(frame, historyContent.toString(), "Ticket History", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private class PayParkingActionListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                double amount = Double.parseDouble(amountField.getText().replace("RM ", ""));
                // Launch the EWalletApp with the amount to be paid
                SwingUtilities.invokeLater(() -> new EWalletApp(amount));
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(frame, "Invalid amount. Please calculate the amount first.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void styleButton(JButton button) {
        button.setBackground(new Color(70, 130, 180));
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setFont(new Font("Arial", Font.BOLD, 14));
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(TicketManagementApp::new);
    }
}

// Ticket class to store ticket details
class Ticket {
    private String startTime;
    private String endTime;
    private String date;
    private String plateNumber;
    private double amount;

    public Ticket(String startTime, String endTime, String date, String plateNumber, double amount) {
        this.startTime = startTime;
        this.endTime = endTime;
        this.date = date;
        this.plateNumber = plateNumber;
        this.amount = amount;
    }

    @Override
    public String toString() {
        return "Date: " + date + ", Start: " + startTime + ", End: " + endTime + ", Plate: " + plateNumber + ", Amount: RM " + amount;
    }
}
